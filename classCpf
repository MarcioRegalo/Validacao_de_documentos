   public class Cpf
    {
        private static string GerarDigito(string cpf)
        {
            int Peso = 2;
            int Soma = 0;

            for (int i = cpf.Length - 1; i >= 0; i--)
            {
                Soma += Peso * Convert.ToInt32(cpf[i].ToString());
                Peso++;
            }

            int pNumero = 11 - (Soma % 11);

            if (pNumero > 9)
                pNumero = 0;

            return pNumero.ToString();
        }

        public bool Validar(string cpf)
        {
            // Se for vazio
            if (String.IsNullOrEmpty(cpf.Trim()))
                return false;

            // Retirar todos os caracteres que não sejam numéricos
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < cpf.Length; i++)
            {
                if (char.IsNumber(cpf[i]))
                    stringBuilder.Append(cpf[i].ToString());
            }
            
            string aux = stringBuilder.ToString();

            // O tamanho do CPF tem que ser 11
            if (aux.Length != 11)
                return false;

            // Caso coloque todos os numeros iguais
            switch (aux)
            {
                case "11111111111":
                    return false;
                case "00000000000":
                    return false;
                case "2222222222":
                    return false;
                case "33333333333":
                    return false;
                case "44444444444":
                    return false;
                case "55555555555":
                    return false;
                case "66666666666":
                    return false;
                case "77777777777":
                    return false;
                case "88888888888":
                    return false;
                case "99999999999":
                    return false;
            }

            // Guardo o dígito para comparar no final
            string pDigito = aux.Substring(9, 2);
            aux = aux.Substring(0, 9);

            //Cálculo do 1o. digito do CPF
            aux += GerarDigito(aux);

            //Cálculo do 2o. digito do CPF
            aux += GerarDigito(aux);

            return pDigito == aux.Substring(9, 2);
        }

        public static string MontarMascara(string cpf)
        {
            StringBuilder stringBuilder = new StringBuilder();
            // Retirar todos os caracteres que não sejam numéricos
            for (int i = 0; i < cpf.Length; i++)
            {
                if (char.IsNumber(cpf[i]))
                    stringBuilder.Append(cpf[i].ToString());
            }

            string aux = stringBuilder.ToString();

            if (aux.Length != 11)
                return cpf;

            string pmontado = "";
            pmontado = aux.Substring(0, 3) + ".";
            pmontado += aux.Substring(3, 3) + ".";
            pmontado += aux.Substring(6, 3) + "-";
            pmontado += aux.Substring(9, 2);

            return pmontado;
        }

    }
